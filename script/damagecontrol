#!/usr/local/bin/ruby

# This is the main bootstrapping script for DamageControl.

require 'optparse'
require 'webrick'
require 'logger'
require 'fileutils'

# default environment
SHELL_DIR = defined?(RUBYSCRIPT2EXE_APPEXE) ? File.expand_path(File.dirname(RUBYSCRIPT2EXE_APPEXE)) : File.expand_path(Dir.pwd)
puts "SHELL_DIR:#{SHELL_DIR}"
DC_OPTIONS = {
  :data_dir        => SHELL_DIR,
  :builders        => 1,
  :no_webrick      => false,
  # Rails/WEBrick
  :port            => 3000,
  :ip              => "0.0.0.0",
  :environment     => defined?(RUBYSCRIPT2EXE_APPEXE) ? 'production' : 'development',
}

ARGV.options do |opts|
  script_name = File.basename($0)
  
  opts.set_summary_indent('  ')
  cmd = defined?(RUBYSCRIPT2EXE_APPEXE) ? File.basename(RUBYSCRIPT2EXE_APPEXE) : "ruby #{File.basename(__FILE__)}"
  opts.banner =    "Usage: #{cmd} [options]"
  opts.define_head "Starts DamageControl"
  opts.separator   ""

  ################## Extraction options ##################

  if(defined?(RUBYSCRIPT2EXE_APPEXE))
    opts.on("--eee-justextract",
            "Extract #{File.basename(RUBYSCRIPT2EXE_APPEXE)} to a single ruby script") {}
  elsif(defined?(TAR2RUBYSCRIPT))
    opts.on("--tar2rubyscript-justextract",
            "Extract #{File.basename(__FILE__)} to directory #{File.basename(__FILE__, ".rb")} in the current directory") {}
  end

  ################## General DamageControl options ##################

  opts.on("--data-dir=dir", String, 
          "DamageControl data directory", 
          "Default: current dir = #{File.expand_path(DC_OPTIONS[:data_dir])}") do |dir|
    Dir.chdir(SHELL_DIR) do
      DC_OPTIONS[:data_dir] = File.expand_path(dir)
    end
  end

  opts.on("--builders=n", Integer,
          "Number of builders to run",
          "Default: #{DC_OPTIONS[:builders]}") { |DC_OPTIONS[:builders]| }

  if(!defined?(RUBYSCRIPT2EXE_APPEXE))
    # Only allow this option if it makes sense - it doesn't for the exe
    # since it unpacks to an arbitrary temp dir and can't be server from
    # a "real" webserver.
    opts.on("--no-webrick",
            "Don't start the webapp with WEBrick (specify this parameter for Apache/Lighttpd deployments)",
            "Default: #{DC_OPTIONS[:no_webrick]}") { |DC_OPTIONS[:no_webrick]| }
  end

  opts.on("--dry-run", "Dry run. Loads the environment and exits.") do
    puts "I'm running dry..."
    ENV["RAILS_ENV"] = "production"
    require File.dirname(__FILE__) + "/../config/environment"
    puts "Done!"
    exit
  end

  ################## Rails/WEBrick options (subset of opts in server script) ##################

  opts.on("-p", "--port=port", Integer,
          "Runs WEBrick on the specified port.",
          "Default: 3000") { |DC_OPTIONS[:port]| }
  opts.on("-b", "--binding=ip", String,
          "Binds WEBrick to the specified ip.",
          "Default: 0.0.0.0") { |DC_OPTIONS[:ip]| }
  opts.on("-e", "--environment=name", String,
          "Specifies the environment to run this server under (test/development/production).",
          "Default: development") { |DC_OPTIONS[:environment]| }

  opts.separator ""

  opts.on("-h", "--help",
          "Show this help message.") { puts opts; exit }

  opts.parse!
end

puts "=> DamageControl parent process running [#{Process.pid}]"
puts "=> DamageControl data dir:#{DC_OPTIONS[:data_dir]}"

database_configuration_file = File.expand_path(File.join(DC_OPTIONS[:data_dir], 'config', 'database.yml'))
unless(File.exist?(database_configuration_file))
  puts "=> DamageControl database settings not found in #{database_configuration_file}"
  puts "=> DamageControl is creating default database settings for SQLite"
  FileUtils.mkdir_p(File.dirname(database_configuration_file)) unless File.exist?(File.dirname(database_configuration_file))

  original_db_yaml = File.expand_path(File.dirname(__FILE__) + '/../config/database.yml')
  raise "#{original_db_yaml} doesn't exist" unless File.exist?(original_db_yaml)
  FileUtils.cp(original_db_yaml, database_configuration_file)
  
  dest_sqlite_db = "#{DC_OPTIONS[:data_dir]}/db/production.db"
  unless(File.exist?(dest_sqlite_db))
    puts "=> DamageControl is copying an emtpy SQLite database to #{dest_sqlite_db}"
    FileUtils.mkdir_p(File.dirname(dest_sqlite_db)) unless File.exist?(File.dirname(dest_sqlite_db))    
    original_sqlite_db  = File.dirname(__FILE__) + '/../db/production.db'
    FileUtils.cp(original_sqlite_db, dest_sqlite_db)
  end
end

BUILDER_OPTIONS = 
  "--data-dir=#{DC_OPTIONS[:data_dir]} " +
  "--environment=#{DC_OPTIONS[:environment]} "

WEBRICK_OPTIONS = 
  "--data-dir=#{DC_OPTIONS[:data_dir]} " +
  "--port=#{DC_OPTIONS[:port]} " +
  "--binding=#{DC_OPTIONS[:ip]} " +
  "--environment=#{DC_OPTIONS[:environment]} "

if(RUBY_PLATFORM =~ /mswin32/)
  def ruby_script(script, opts)
    program = File.dirname(__FILE__) + '/' + script
    loadpath = $:.join(";")
    ruby_cmd = "ruby -I#{loadpath} #{program} #{opts}"
    IO.popen(ruby_cmd) do |io|
      io.each_line{|line| puts line}
    end
  end

  def start_webrick
    ruby_script("server", WEBRICK_OPTIONS)
  end

  def start_builder(id)
    ruby_script("builder", BUILDER_OPTIONS + "--id=#{id}")
  end
else
  def start_webrick
    server_pid = fork do
      WEBRICK_OPTIONS.split(" ").each{|opt| ARGV << opt}
      load(File.dirname(__FILE__) + '/server')
    end
    at_exit do 
      puts "Killing WEBrick [#{server_pid}]"
      Process.kill("HUP", server_pid)
    end
    Process.wait(server_pid)
  end

  def start_builder(id)
    builder_pid = fork do
      BUILDER_OPTIONS.split(" ").each{|opt| ARGV << opt}
      ARGV << "--id=#{id}"
      load(File.dirname(__FILE__) + '/builder')
    end
    at_exit do 
      puts "Killing Builder [#{builder_pid}]"
      Process.kill("HUP", builder_pid)
    end
    Process.wait(builder_pid)
  end
end

threads = []

unless(DC_OPTIONS[:no_webrick])
  threads << Thread.new do
    start_webrick
  end
end

(1..DC_OPTIONS[:builders]).each do |i|
  threads << Thread.new do
    start_builder(i)
  end
end

threads.each{|t| t.join}