= RSCM - Ruby Source Control Management

RSCM is a Ruby library for various Source Control Management (SCM) systems. RSCM provides an intuitive API
which is described in AbstractSCM.

RSCM is currently used inside DamageControl. Let us know if you use it for something else.

RSCM also provides integration with issue traqcking systems and SCM web front-ends.

== Supported SCMs

* CVS
* Subversion
* P4 (in progress)

== Issue trackers

RSCM can recognise bug/issue numbers from a number of popular issue tracking systems.
It can convert a simple textual SCM commit message and convert issue numbers to html
links that can be displayed on web pages, emails and other systems.

== SCM web front-ends

RSCM can generate links to SCM web frontends such as Fisheye, Trac, ViewCVS and Chora.
This way links to diffs can be easily created.

== RSS 

It is easy to make RSS feeds from RSCM's ChangeSets objects. RSCM provides an
alternative to tools like CVSSpam and SVN::Notify that is portable across several
SCMs.

== YAML

RSCM objects are easily serializable to YAML.

== Changesets

RSCM's ChangeSets support makes it possible to mimic atomic changesets for SCMs
that don't aupport it natively (CVS, VSS).

= Usage

Here is an example of how to use RSCM to get a list of changes with Subversion:

  require 'rscm'
  
  scm = RSCM::SVN.new
  scm.svnurl = "svn://some.server/some/path/trunk"
  scm.svnpath = "trunk"

  scm.checkout("mycheckout")
  changesets = scm.changesets("mycheckout", Time.utc(2004, 11, 10, 12, 34, 22))
  changesets.each do |changeset|
    puts changeset
  end

= Implementing support for a new SCM

Let's write an RSCM implementation for the imaginary SCM called Mooky.
Start by writing a test:

<<< test/rscm/mooky/mooky_test.rb

By including GenericSCMTests your test will automatically include the
acceptance test suite for RSCM. As you will see later, this will be of great
help when developing the Mooky class.

Let's start implementing the Mooky class too:

<<< Rakefile
<<< lib/rscm/mooky/mooky.rb

Try running this test:

  rake test TEST_FILES=**/mooky_test.rb
  
Whoops - we got some failures! Let'see if we can get the test_basic method
to get a little further before it fails. It failed because our checkout
method returned nothing (nil).

The Mooky SCM happens to have a command line utility to perform a checkout.
From the command line a checkout with mooky would be done like this:

  cd somewhere
  mooky checkout --repo mooky://some/where/else

This will print the following to standard out:

  checkout build.xml
  checkout project.xml
  checkout src/java/com/thoughtworks/damagecontrolled/Thingy.java
  checkout src/test/com/thoughtworks/damagecontrolled/ThingyTestCase.java
  
What we need to do is to execute these commands from Ruby. We also need to 
parse the output from the mooky command to determine the files that were checked out,
so that we can return an array with the right information.

NOTE: If the SCM already has a 3rd party Ruby API (like Perforce), we would probably
want to use that instead of the command line API.

NOTE: If the SCM doesn't have a command line utility or a 3rd party Ruby API, but instead
provides libraries (perhaps in C), then you should consider writing a Ruby C extension
instead.

= Implementation notes

* SCM classes should have a no-arg constructor and be serialisable with YAML
* SCM classes should be inexpensive to instantiate (should not access SCM in constructor)

= Web interface