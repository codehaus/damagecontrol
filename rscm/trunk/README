= RSCM - Ruby Source Control Management

RSCM is a Ruby library for various Source Control Management (SCM) systems. RSCM provides an intuitive API
which is described in AbstractSCM.

= Feature overview

* API support for several high level operations such as checkout, get changesets, check for uptodate etc.
* Built-in admin server based on Rails (http://www.rubyonrails.org/)
* Generation of RSS feeds.
* Generation of URL links to diffs for several popular SCM web front-ends.
* Generation of URL links to bugs/issues for several popular bug/issue trackers.
* Changeset emulation for SCMs that don't support it natively (like CVS and StarTeam)
* RSCM objects are easily serializable to YAML.
* Uses UTC times according to the SCM server's clock, not the machine running RSCM.

=== Wish:

Integrate with CVSSpam so that all supported SCMs (not only CVS) can benefit from its awesome coloured diff capabilities.
This would provide a very nice alternative to SCM web front-ends.

== Admin Server

RSCM ships with a web interface based on Rails (which you have to install separately). To launch, just run the script/server script:

  ruby script/server
  
Please refer to the Rails doco for further details. (TODO: improve this part of the doco).

=== IMPORTANT WINDOWS NOTE

If you intend to run the RSCM server on Windows, you should run a Cygwin build of Ruby. This is because
the win32 build of windows will block the web server while accessing the SCM - multi threading mised with
external processes doesn't work well on the win32 ruby.

We recommend that you just download and unpack the Cygwin Ruby from http://ftp.ruby-lang.org/pub/ruby/binaries/cygwin/
As of this writing you should get the latest 1.8 distro. There is no need to install Cygwin separately, just
make sure your path *starts* with:

  <rscm>\bin;<cygwin ruby>\usr\local\bin
  
If you're using CVS or Subversion with RSCM, these should be native win32 binaries and *not* Cygwin binaries.

Finally, you may also have to install rubygems from http://rubyforge.org/projects/rubygems
since this is currently not included in the Cygwin build of Ruby.

== RSS Server

RSCM can generate RSS feeds for all supported SCMs. The RSS feeds will have one item per changeset.
Each RSS item's description contains the changeset's commit message, optionally with HTML links to
issue/bug tracker issues (if detected in the changeset's commit message). The item's description
will also contain a list of all the modified files, optionally with HTML links to a diff page
in an SCM web front-end.

A daemon-like utility for periodically generating RSS feeds (and writing to a disk) is underway.
It will be customisable with a simple YAML file. It will also come with its ownb embedded web server
(WEBrick) that can be used to serve the RSS, as well as configure the settings for the feeds.

== Supported SCMs

* CVS - http://www.cvshome.org/
* StarTeam - http://www.borland.com/starteam/
* Subversion - http://subversion.tigris.org/

In progress:

* Darcs - http://www.abridgegame.org/darcs/
* Monotone - http://www.venge.net/monotone/
* Perforce - http://www.perforce.com/

Planned:

Loads! How to add support for a new one is described further down in this file.

== Supported Issue trackers

RSCM can recognise bug/issue numbers (in commit messages) fom a number of popular issue 
tracking systems. It can also convert a simple textual SCM commit message to include html
links that can be displayed on web pages, emails and other systems. The built-in RSS generator
uses this. Currently supported trackers are:

* Bugzilla - http://www.bugzilla.org/
* JIRA - http://www.atlassian.com/software/jira/
* RubyForge - http://rubyforge.org/
* Scarab - http://scarab.tigris.org/
* SourceForge - http://sourceforge.net/

Planned:

* Trac - http://www.edgewall.com/trac/
* RT - http://fsck.com/projects/rt/

== SCM web front-ends

RSCM can generate html links to individual diff pages in SCM web frontends. These links can be 
displayed on web pages, emails and other systems. The built-in RSS generator uses this.  
Currently supported web front-ends are:

* Fisheye - http://www.cenqua.com/fisheye/
* ViewCVS - http://viewcvs.sourceforge.net/

Planned:

* Trac - http://www.edgewall.com/trac/
* Chora - http://horde.org/chora/

This way links to diffs can be easily created.

== API usage

Here is an example of how to use RSCM to get a list of changes with Subversion:

  require 'rscm'
  
  scm = RSCM::SVN.new
  scm.svnurl = "svn://some.server/some/path/trunk"
  scm.svnpath = "trunk"

  scm.checkout("mycheckout")
  changesets = scm.changesets("mycheckout", Time.utc(2004, 11, 10, 12, 34, 22))
  changesets.each do |changeset|
    puts changeset
  end

= Implementing support for a new SCM

We'd be happy to receive contributions for more SCMs. You can always
file a JIRA issue and hope for someone to implement it for you, or
you can do it yourself. The rest of this file should get you started.

N.B. IF YOU START IMPLEMENTING A NEW RSCM PLUGIN, PLEASE SUBMIT YOUR CODE
TO JIRA AT AN EARLY STAGE (BEFORE IT'S COMPLETE). THIS WAY IT'S EASIER
FOR EXISTING DEVELOPERS TO PROVIDE TIPS AND HELP UNDERWAY.

Let's write an RSCM implementation for the imaginary SCM called Mooky.

== Writing the API

Start by writing a test:

<<< test/rscm/mooky/mooky_test.rb

By including GenericSCMTests your test will automatically include the
acceptance test suite for RSCM. As you will see later, this will be of great
help when developing the Mooky class.

Let's start implementing the Mooky class too. Take a look at.

  lib/rscm/mooky/mooky.rb

Try running Mooky's test:

  rake test TEST=test/mooky/mooky_test.rb
  
Whoops - we got some failures! It failed because our checkout method returned 
nothing (nil). Let'see if we can get the a little further by implementing this
method.

The Mooky SCM happens to have a command line utility to perform a checkout.
From the command line a checkout with mooky would be done like this:

  cd somewhere
  mooky checkout --repo mooky://some/where/else

Running this command will print the following to standard out:

  checkout build.xml
  checkout project.xml
  checkout src/java/com/thoughtworks/damagecontrolled/Thingy.java
  checkout src/test/com/thoughtworks/damagecontrolled/ThingyTestCase.java
  
What we need to do is to execute these commands from Ruby. We also need to 
parse the output from the mooky command to determine the files that were checked out,
so that we can return an array with the file names of the checked out files (the method 
should also yield each file name as the execution proceeds).

Once your checkout command works okay, the test will get you a little further. Just keep
on going until all tests pass.

NOTE: If the SCM doesn't have a command line utility or a 3rd party Ruby API, but instead
provides libraries (perhaps in C), then you should consider writing a Ruby C extension
instead.

If the SCM has a Java interface, you can take the same approach as for StarTeam. There are
Java classes for Changesets that allow easy interaction between Ruby and Java over YAML. 
You can reuse these classes for other Java based SCMs (if there are any).

== Writing the web interface

Start by creating +app/views/project/_mooky.rhtml+. 

Create a table with 2 columns and a row for each +attr_accessor+ in the Mooky class, preferrably
with some explanatory text for the users so they know how to fill it in.

You also need a javascript section at the top
with a function called +mooky_init()+. This will be called when the page is loaded. If you don't
have plans to do anything fancy here, just leave it blank.

That's all!

== Wiring it all up

Just edit +lib/rscm.rb+ and +require+ your new scm class. Now you should see it coming up
on the Source Control tab in the web interface.

= Implementation notes

* SCM classes should have a no-arg constructor and be serialisable with YAML
* SCM classes should be inexpensive to instantiate (should not access SCM in constructor)

= Building RSCM
This section is for developers who are new to ruby development and do not already know how to build and install Ruby gems.

You need to install rubygems from http://rubyforge.org/projects/rubygems
Afterwards you need to install rake and rails

  gem install rake
  gem install rails

Now change to the RSCM root directory and type

  rake

This will create a gem for RSCM. To install this gem, you have to change to the pgk directory and type

  sudo gem install rscm
  
Now you can use RSCM in other Ruby apps.
