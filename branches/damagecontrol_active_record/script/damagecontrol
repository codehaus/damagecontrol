#!/usr/local/bin/ruby

# Require the files from ruby's stdlib that will be needed by damagecontrol,
# then exit if we're in rubyscript2exe packaging mode
# (gems need not be required here, they're packaged separately by lib/dist.rake)
require 'optparse'
require 'webrick'
require 'logger'

# default options
MAIN_OPTIONS = {
  :webrick => false,
  :builders => 1
}

# TODO: replicate all the options from server and builder here!
ARGV.options do |opts|
  script_name = File.basename($0)
  
  opts.set_summary_indent('  ')
  opts.banner =    "Usage: ruby #{script_name} [OPTIONS]"
  opts.define_head "Starts DamageControl"
  opts.separator   ""

  opts.on("-w", "--webrick",
       "Starts the webapp") { |MAIN_OPTIONS[:webrick]| }
  opts.on("-u", "--build-daemons=n", Integer,
      "Number of build daemons to start",
      "Default: #{MAIN_OPTIONS[:builders]}") { |MAIN_OPTIONS[:builders]| }
  opts.on("-r", "--dry-run", "Dry run. Loads the environment and exits.") do
    puts "I'm running dry..."
    ENV["RAILS_ENV"] = "production"
    require File.dirname(__FILE__) + "/../config/environment"
    puts "Done!"
    exit
  end

  opts.separator ""
  opts.on_tail("-h", "--help", "Show this help message.") { puts o; exit }
  
  opts.parse!
end

def start_webrick
  server_pid = fork do
    load(File.dirname(__FILE__) + '/server')
  end
  at_exit do 
    puts "Killing WEBrick [#{server_pid}]"
    #Process.kill("HUP", server_pid)
  end
  Process.wait(server_pid)
end

def start_builder
  builder_pid = fork do
    begin
      load(File.dirname(__FILE__) + '/builder')
    rescue
      exit
    end
  end
  at_exit do 
    puts "Killing Builder [#{builder_pid}]"
    #Process.kill("HUP", builder_pid)
  end
  Process.wait(builder_pid)
end

threads = []

if(MAIN_OPTIONS[:webrick])
  threads << Thread.new do
    start_webrick
  end
end

(1..MAIN_OPTIONS[:builders]).each do |i|
  threads << Thread.new do
    start_builder
  end
end

puts "=> DamageControl parent process running [#{Process.pid}]"
threads.each{|t| t.join}