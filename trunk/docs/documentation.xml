<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<book>
  <title>DamageControl</title>

  <bookinfo>
    <date>11/09/2004</date>

    <authorgroup>
      <author>
        <firstname>Aslak</firstname>

        <surname>Helles√∏y</surname>

        <affiliation>
          <orgname>ThoughtWorks Inc.</orgname>
        </affiliation>
      </author>

      <author>
        <firstname>Jon</firstname>

        <surname>Tirsen</surname>

        <affiliation>
          <orgname>ThoughtWorks Inc.</orgname>
        </affiliation>
      </author>

      <author>
        <firstname>Lars</firstname>

        <surname>Trieloff</surname>
      </author>
    </authorgroup>

    <subtitle>control the damage before the damage controls you</subtitle>
  </bookinfo>

  <preface>
    <title>What is DamageControl</title>

    <para>DamageControl is a continous integration system that helps you to
    keep feedback about build failures. If you are working on a project that
    is supervised by DamageControl and one of your team members commits
    changes to the Software Configuration Management System, DamageControl
    will detect the changes to the codebase and attempt to build a integration
    build of your project.</para>

    <para>If this integration build succeeds, everything is OK. The green
    light shows up and you can continue your work. If the recent changes have
    broken the build, your project is damaged. DamageControl helps you to
    <quote>control the damage before the damage controls you</quote>. The
    first step is that the team members who have broken the build are
    informed. There are different ways to do it, they can receive an EMail, an
    instant message, an issue could be filed in the issue tracker or a status
    monitor at their desktop could show a red light.</para>

    <para>In the next step, the objected changes could be rolled back, so that
    the project is in an consistant state again. The damager will repair the
    damage and everyone else will continue to work.</para>

    <para>What distinguishes DamageControl from other continuous integration
    systems like CruiseControl or CruiseControl.NET?</para>

    <itemizedlist>
      <listitem>
        <para>DamageControl is under heavy development. If you want to use
        something rock solid and do not care for the newest features, stop
        reading here.</para>
      </listitem>

      <listitem>
        <para>DamageControl is platform agnostic. You can build your project
        with Java, Ant, Ruby, .NET, Nant, Make or whatever tools you
        like.</para>
      </listitem>

      <listitem>
        <para>DamageControl is easy to use and offers simple, web-based
        configuration. No need to edit XML files.</para>
      </listitem>

      <listitem>
        <para>DamageControl is self-contained. It comes with an own runtime
        and an embedded webserver.</para>
      </listitem>

      <listitem>
        <para>DamageControl has many channels to notify users of successful or
        failed builds. And it is very easy to create your own notification
        channel.</para>
      </listitem>

      <listitem>
        <para>DamageControl supports as many projects as you need and your
        build server can handle. It is even possible to run multiple builds at
        once.</para>
      </listitem>

      <listitem>
        <para>DamageControl builds are triggered by CVS or Subversion on every
        commit. It can install the triggers for you and supports polling, if
        it is impossible to use triggers.</para>
      </listitem>

      <listitem>
        <para>DamageControl integrates with tools like ViewCVS or Fisheye as
        well as Jira, Bugzilla and Scarab.</para>
      </listitem>
    </itemizedlist>

    <para>In this documentation you will find everything needed for running
    and configuring DamageControl. Additionally you will find information
    important if you would like to implement extensions to DamageControl to
    make it fit your specific needs.</para>

    <para>Before you decide that you do not need a program like DamageControl,
    because it does not help you to create more shiny new code in shorter
    time, consider the advantages of detecting problems early: The sooner a
    problem is detected, the cheaper it is to fix it.</para>

    <para>If you identify problems during requirements engineering, you can
    talk with the customer and the problem is gone. If you identify problems
    during the design phase, you have all opportunities to find a design that
    will avoid those problems. If you occur problems during the
    implementation, you can still fix bugs and create workarounds for other
    issues. Trying to correct a problem in an already deployed system is very
    hard and expensive.</para>

    <para>So DamageControl helps you to identify problems early, to solve
    identified problems and to produce high-quality-software cost-efficient
    while keeping your schedules.</para>
  </preface>

  <chapter>
    <title>User Manual</title>

    <section>
      <title>Installing DamageControl</title>

      <section os="unix">
        <title>Linux, UNIX, Mac OS X</title>

        <para>To install DamageControl on a server with an UNIX-like operating
        system, follow these steps.</para>

        <procedure>
          <step>
            <para>Download Ruby, version 1.8.2_pre2 or later from the <ulink
            url="http://www.ruby-lang.org/">Ruby Homepage</ulink>. In most
            cases it is not required to install Ruby manually, as most Linux
            distributions have prepared packages of Ruby available, which can
            be installed using the distribution's packet manager.</para>
          </step>

          <step>
            <para>Install a client for the SCM system you are using on the
            build server. Supported version control systems are
            currently:</para>

            <itemizedlist>
              <listitem>
                <para><ulink
                url="http://subversion.tigris.org/">Subversion</ulink></para>
              </listitem>

              <listitem>
                <para>the <ulink url="http://www.cvshome.org/">Concurrent
                Versioning System</ulink> (CVS)</para>
              </listitem>
            </itemizedlist>
          </step>

          <step>
            <para>Download DamageControl from the <ulink
            url="http://dist.codehaus.org/damagecontrol/distributions/">DamagControl
            download page</ulink>. There is one distribution tarball for every
            successful build and in most cases the latets build is the best
            choice.</para>
          </step>

          <step>
            <para>Unpack the tarball to a directory of your choice. Define a
            environment variable <envar>DAMAGECONTROL_HOME</envar> which
            points to the directory where you unpacked the archive.</para>
          </step>
        </procedure>

        <para>Additionally it could be useful to install an Apache Web Server
        to allow configuration of access privileges, a Mail server to send
        notification messages per EMail, or an IRC server.</para>

        <para>If you are using mail notifications, the optimal way to inform
        your developers is using a mailing list. Everyone who is subscribed to
        the mailing list will receive the notification, but DamageControl can
        still send mails to individual developers.</para>

        <section>
          <title>Gentoo Linux</title>

          <para>Users of Gentoo Linux can take advantage of a ebuild that wil
          automatically install DamageControl. Follow these instructions to
          install the ebuild.</para>

          <procedure>
            <step>
              <para>Open the file <filename>/etc/make.conf</filename> and
              define the variable <varname>PORTDIR_OVERLAY</varname>. This
              variable contains a list of directories portage uses to search
              for ebuild.</para>
            </step>

            <step>
              <para>Change to one of the directories defined before.</para>
            </step>

            <step>
              <para>Download the ebuilds.</para>

              <screen><prompt># </prompt><userinput>wget \
  http://goshaky.com/goshaky-distfiles/gentoo/damagecontrol-ebuild.tar.bz2</userinput></screen>
            </step>

            <step>
              <para>Unpack the tarball.</para>

              <screen><prompt># </prompt><userinput>tar -jxvf damagecontrol-ebuild.tar.bz2</userinput></screen>
            </step>
          </procedure>

          <para>DamageControl can be installed by typing <literal>emerge
          damagecontrol</literal> on the command line. If you would like to
          use HTTP authentification, you should have the use-flag
          <literal>apache2</literal> set.</para>
        </section>
      </section>

      <section os="windows">
        <title>Windows</title>

        <para>Users of the Microsoft WIndows Operating System can install
        DamageControl using the installer. You do not need to download a
        separate Ruby runtime, as it is included in the installer.</para>
      </section>
    </section>

    <section>
      <title>Configuring the DamageControl Server</title>

      <para>Users of DamageControl under Microsoft Windows can start
      DamageControl using the created entries in the Start menu. On other
      platforms, starting
      <filename><envar>DAMAGECONTROL_HOME</envar>/bin/damagecontrol</filename>
      is the preferred solution. This script expects a configuration file as
      command line argument.</para>

      <caution>
        <para>It is very dangerous to run DamageControl as
        <literal>root</literal>-user. It is better to create a new user, which
        has read and write access to <envar>DAMAGECONTROL_HOME</envar> and
        <envar>DAMAGECONTROL_WORK</envar>, but cannot access other user's
        files.</para>
      </caution>

      <para>A default configuration is provided in the file
      <filename><envar>DAMAGECONTROL_HOME</envar>/bin/server.rb</filename>. If
      you would like to make changes to the configuration, you should create a
      copy of <filename>server.rb</filename> and edit and use this
      configuration file.</para>

      <para>The following sections cover example configurations for a number
      of purposes. All these configurations are optional and not needed if you
      just want to test DamageControl.</para>

      <section>
        <title>Access Control</title>

        <para>By default everyone can access the DamageControl server and add
        projects or change configurations. This is not useful if you want to
        have an public build server, because you do not want to allow
        strangers to change the configuration of your DamageControl
        server.</para>

        <para>This configuration involves two steps. Firstly you have to
        configure DamageControl to allow connections only from the local
        machine. Secondly you have to create a Apache proxy server that will
        serve the DamageControl pages.</para>

        <para>To modify the DamageControl configuration follow these
        steps.</para>

        <procedure>
          <step>
            <para>Open your DamageControl server configuration file in a text
            editor.</para>
          </step>

          <step>
            <para>Find the section which configures the network server. This
            section looks in the default configuration like this:</para>

            <programlisting>server = DamageControlServer.new(
  :RootDir =&gt; ENV["DAMAGECONTROL_WORK"],
  :HttpPort =&gt; 4712,
  :PollingInterval =&gt; 60 # specified in seconds
  # to allow access only from localhost then uncomment line below 
  # (when running behind an Apache proxy for example)
  #:AllowIPs =&gt; [ "127.0.0.1" ],
  )</programlisting>
          </step>

          <step>
            <para>Change the lines to this configuration to allow access only
            from the local machine. If your webserver is running on a
            different machine, you should replace <literal>127.0.0.1</literal>
            with the IP-address of the remote webserver.</para>

            <programlisting>server = DamageControlServer.new(
  :RootDir =&gt; ENV["DAMAGECONTROL_WORK"],
  :HttpPort =&gt; 4712,
  :PollingInterval =&gt; 60,
  :AllowIPs =&gt; [ "127.0.0.1" ]
  )</programlisting>
          </step>
        </procedure>

        <para>In order to serve the DamageControl pages from an ordinary web
        server, install a web server and configure it to work as a proxy for
        DamageControl. An example configuration for the Apache webserver is
        like this.</para>

        <programlisting>ProxyRequests off
RewriteEngine On
ProxyPass /public http://localhost:4712/public
ProxyPassReverse /public http://localhost:4712/public
ProxyPass /private http://localhost:4712/private
ProxyPassReverse /private http://localhost:4712/private</programlisting>

        <para>This configuration passes all requests to
        http://servername/public and http://servername/private to the
        corresponding locations of the DamageControl server. To add
        authentification to the private configuration parts, you should append
        following lines to the Apache configuration.</para>

        <programlisting>&lt;Location /private&gt;
        AuthName "DamageControl"
        AuthType Basic
        AuthUserFile /etc/apache2/dc.passwd
        Require valid-user
&lt;/Location&gt;</programlisting>

        <para>No user will be able to access the web configuration interface
        of the DamageControl server, unless the user has provided a
        username-password-configuration that is included in the password file
        <filename>/etc/apache2/dc.passwd</filename>.</para>
      </section>

      <section>
        <title>Multiple Build Executors</title>

        <para>DamageControl has the ability to run multiple build parallel.
        Each build will be executed by one build executor. The default
        configuration includes only one build executor, so if this executor is
        in use and a new build is triggered, the build will queued in the
        build queue.</para>

        <para>If you would like to build two projects at once, you have to
        define a new build executor. To do this, follow these steps.</para>

        <procedure>
          <step>
            <para>Open your DamageControl server configuration file in a text
            editor.</para>
          </step>

          <step>
            <para>Find the line</para>

            <programlisting>def server.init_build_executors</programlisting>
          </step>

          <step>
            <para>Insert following code behind this line.</para>

            <programlisting>build_scheduler.add_executor(
  BuildExecutor.new(
    'executor2', 
    hub, 
    project_directories, 
    build_history_repository))</programlisting>

            <para><literal>executor2</literal> is the name of the new
            executor. This name must be unique for one DamageControl server
            installation.</para>
          </step>

          <step>
            <para>For each additional build executor, repeat the last step but
            do not forget to select a unique name for each executor.</para>
          </step>
        </procedure>
      </section>
    </section>

    <section>
      <title>Configuring DamageControl Projects</title>

      <para>If you have installed DamageControl and set up DamageControl to
      fit your needs, it is time to configure projects DamageControl will
      build. This is very easy as you can use the web interface for almost all
      tasks.</para>

      <section>
        <title>Creating Projects</title>

        <para>In order to create a new project, open the private dashboard of
        the DamageControl server. If DamageControl is running on your local
        machine, the URL is usually <ulink
        url="http://localhost:4712/private/dashboard">http://localhost:4712/private/dashboard</ulink>,
        if DamageControl is running behind an Apache proxy, open <ulink
        url="http://hostname/private/dashboard">http://hostname/private/dashboard</ulink>.</para>

        <figure>
          <title>An empty private dashboard</title>

          <screenshot>
            <mediaobject>
              <imageobject>
                <imagedata contentwidth="16cm"
                           fileref="images/new_project.png" />
              </imageobject>
            </mediaobject>
          </screenshot>
        </figure>

        <para>A new project is created by following the <guilabel>New
        project</guilabel> hyperlink. The following page allows you to enter
        the project name, the build command and some other configuration
        options.</para>

        <figure>
          <title>The configuration screen</title>

          <screenshot>
            <mediaobject>
              <imageobject>
                <imagedata contentwidth="16cm"
                           fileref="images/project_name.png" />
              </imageobject>
            </mediaobject>
          </screenshot>
        </figure>

        <para>After having entered all configuration options, you can click
        the <guibutton>Save</guibutton> button and the new project is
        created.</para>

        <para>You can navigate to the project overview using the
        <guilabel>Back to project</guilabel> hyperlink or the hyperlinked
        project name in the navigation breadcrumbs. From this location, which
        is generally available at
        <literal>http://hostname:port/private/project/<replaceable>projectname</replaceable></literal>.
        This page allows you to clone the project, which will create a project
        with identical settings, but different name, to configure the project,
        to trigger a new build, even if no changes have been made to the
        codebase and to clean all working files.</para>

        <para>On the public project page, which is available at
        <literal>http://hostname:port/public/project/<replaceable>projectname</replaceable></literal>
        you can just view the current build status, inspect the command line
        output of the build or view unit test results. Aditionally it is
        possible to view the working files and the history of occurred
        builds.</para>
      </section>

      <section>
        <title>DamageControl and Build Tools</title>

        <para>DamageControl will support any build tool you need in your
        project. All you need to do is to enter the relevant build command in
        the field labeled <guilabel>Build command</guilabel>. If the command
        returns an exit code of <literal>0</literal>, the build is successful,
        if the build end with another status code, it was a failed
        build.</para>

        <sidebar>
          <title>What if the build returns the wrong error code?</title>

          <para>Some configurations of Ant under Microsoft Windows operating
          systems return the wrong error code. To fix this behaviour, you will
          have to modify the <filename>ant.bat</filename> that is executed
          when calling <command>ant</command> to return the correct error
          code. This is done by adding following code at the end of
          <filename>ant.bat</filename>.</para>

          <programlisting>exit %errorlevel%</programlisting>
        </sidebar>

        <para>Example commands to be run by DamageControl are:</para>

        <screen>make all
ant dist
maven jar</screen>

        <para>Some Windows setups may require, that you run ant in the native
        shell and not in a possibly installed cywin shell. For this purpose,
        you have to use a build command like this.</para>

        <screen>cmd /C ant dist</screen>

        <para>If your project root directory does not equal the project, you
        want to run your builds in, you have to change to this directory
        before. An appropiate build command would be as following.</para>

        <screen>cd subdir &amp;&amp; make all</screen>

        <para>If you need to build more complicated build scripts, you can use
        following environment variables that are passed to an external build
        process. You can use these variables to create build artifacts which
        are specific to a certain build.</para>

        <variablelist>
          <varlistentry>
            <term><envar>DAMAGECONTROL_CHANGES</envar></term>

            <listitem>
              <para>Contains the relative path of each modified file since
              last successful build, separated by whitespaces</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term><envar>DAMAGECONTROL_BUILD_LABEL</envar></term>

            <listitem>
              <para>Contains the build number as determined by
              damagecontrol</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>

      <section>
        <title>DamageControl and SCM Systems</title>

        <para>DamageControl has an event-view to your project. This means,
        rebuilds are triggered when a change to the codebase of your project
        (an event) occurs. To make this triggering possible, your software
        configuration management system must support triggers.</para>

        <para>For SCM systems like CVS and Subversion, DamageControl can
        install triggers automatically if it has local access to the
        repository. To use a specific SCM, you will have to select the radio
        box for this SCM and enter the required configuration
        parameters.</para>

        <para>If you have local access to the repository, there will be a new
        action available at the private project webpage, which allows you to
        create the repository and to install the triggers. If you are less
        fortunate, you will have to install the triggers yourself, which is
        described in the following sections.</para>

        <section>
          <title>Installing Triggers for CVS</title>

          <para>To install the triggers for CVS you need to have DamageControl
          installed at the CVS server. DamageControl does not need to be
          running, as it will be used as client to trigger new builds via the
          remote API.</para>

          <para>To install the trigger follow these steps from a computer that
          has access to the CVS repository.</para>

          <procedure>
            <step>
              <para>Check out the <filename>CVSROOT</filename> of your
              project</para>

              <screen><prompt># </prompt><userinput>cvs -d<replaceable>&lt;cvsroot to your repository&gt;</replaceable> checkout CVSROOT</userinput></screen>

              <para>There should be a newly created directory
              <filename>CVSROOT</filename>.</para>
            </step>

            <step>
              <para>Edit the file <filename>CVSROOT/loginfo</filename> and add
              following line.</para>

              <programlistingco>
                <areaspec>
                  <area coords="1 11" id="modulename" units="linecolumn" />

                  <area coords="1 36" id="dcinstallation" units="linecolumn" />

                  <area coords="1 59" id="cmd" os="windows" units="linecolumn" />

                  <area coords="2 59" id="dcurl" units="linecolumn" />

                  <area coords="3 28" id="projectname" units="linecolumn" />
                </areaspec>

                <programlisting><replaceable>modulename</replaceable> <replaceable>/path/to/dc/installation</replaceable>/bin/requestbuild<optional
                    os="windows">.cmd</optional> \
  --url http://<replaceable>your-damagecontrol-host:4712</replaceable>/private/xmlrpc \
  --projectname <replaceable>projectname       </replaceable></programlisting>
              </programlistingco>

              <calloutlist>
                <callout arearefs="modulename">
                  <para>The name of the module in the CVS repository</para>
                </callout>

                <callout arearefs="dcinstallation">
                  <para>The path to your DamageControl installation</para>
                </callout>

                <callout arearefs="cmd" os="windows">
                  <para>You will have to add the extension
                  <filename>.cmd</filename>, you are using Microsoft
                  Windows.</para>
                </callout>

                <callout arearefs="dcurl">
                  <para>The URL of the actual build server. You specify the
                  private XML-RPC address here. Please make sure that this URI
                  is accessible from the SCM server without
                  authentification.</para>
                </callout>

                <callout arearefs="projectname">
                  <para>The projectname at the DamageControl server.</para>
                </callout>
              </calloutlist>
            </step>

            <step>
              <para>Finally commit the changes to the CVS server.</para>

              <screen><prompt># </prompt><userinput>cvs ci CVSROOT/loginfo -m "<replaceable>Installed DamageControl triggers</replaceable>"</userinput></screen>
            </step>
          </procedure>
        </section>

        <section>
          <title>Installing hooks for Subversion</title>

          <para>In order to install the hooks for Subversion you need to have
          DamageControl installed at the Subversion server. DamageControl does
          not need to be running, as it will be used as client to trigger new
          builds via the remote API.</para>

          <para>You will have to follow these steps from the server where your
          Subversion repository is located.</para>

          <procedure>
            <step>
              <para>Go to the hooks directory of your subversion
              repository.</para>

              <screen><prompt># </prompt><userinput>cd <replaceable>/var/svn/repos/projectname/hooks</replaceable></userinput></screen>
            </step>

            <step>
              <para>If the file <filename>post-commit</filename> does not
              exist, copy the template create a new file caled
              <filename>post-commit</filename> with following contents.</para>

              <programlisting>#! /bin/sh</programlisting>

              <para>This is a shell script that will be executed after every
              successful commit. This file does nothing, because the actual
              contents will be added in the next step.</para>
            </step>

            <step>
              <para>Add following lines to the file
              <filename>post-commit</filename>.</para>

              <programlistingco>
                <areaspec>
                  <area coords="1 25" id="svn.dcinstallation"
                        units="linecolumn" />

                  <area coords="1 48" id="svn.cmd" os="windows"
                        units="linecolumn" />

                  <area coords="2 59" id="svn.dcurl" units="linecolumn" />

                  <area coords="3 28" id="svn.projectname" units="linecolumn" />
                </areaspec>

                <programlisting><replaceable>/path/to/dc/installation</replaceable>/bin/requestbuild<optional
                    os="windows">.cmd</optional> \
  --url http://<replaceable>your-damagecontrol-host:4712</replaceable>/private/xmlrpc \
  --projectname <replaceable>projectname        </replaceable></programlisting>

                <calloutlist>
                  <callout arearefs="svn.dcinstallation">
                    <para>The path to your DamageControl installation</para>
                  </callout>

                  <callout arearefs="svn.cmd" os="windows">
                    <para>You will have to add the extension
                    <filename>.cmd</filename>, you are using Microsoft
                    Windows.</para>
                  </callout>

                  <callout arearefs="svn.dcurl">
                    <para>The URL of the actual build server. You specify the
                    private XML-RPC address here. Please make sure that this
                    URI is accessible from the SCM server without
                    authentification.</para>
                  </callout>

                  <callout arearefs="svn.projectname">
                    <para>The projectname at the DamageControl server.</para>
                  </callout>
                </calloutlist>
              </programlistingco>
            </step>
          </procedure>
        </section>
      </section>

      <section>
        <title>DamageControl and Issue Trackers</title>

        <para>DamageControl has support for various issue trackers. In most
        cases this support means that whenever a commit message refers to a
        issue number in Jira, Bugzilla, Scarab or sourceforge.net issue
        trackers, this issue number will be turned into a hyperlink to the
        issue tracking system.</para>

        <para>For the issue tracker Jira, there is an additional feature. A
        Jira publisher allows to create Jira issues for each failed build. To
        use this publisher, you will have to edit the server configuration
        file.</para>

        <procedure>
          <step>
            <para>Open your DamageControl server configuration file in a text
            editor.</para>
          </step>

          <step>
            <para>Find following line.</para>

            <programlisting>def server.init_custom_components</programlisting>
          </step>

          <step>
            <para>Add following code below this line.</para>

            <programlisting>require 'damagecontrol/publisher/JIRAPublisher'
component(:jira_publisher, 
  JIRAPublisher.new(
    hub, 
   "short_text_build_result_with_link.erb", 
   "<replaceable>jira.server</replaceable>", 
   "<replaceable>username</replaceable>",
   "<replaceable>password</replaceable>")</programlisting>

            <para>Replace <literal>jira.server</literal> with the hostname of
            your Jira installation and <literal>username</literal> and
            <literal>password</literal> with the credentials of a user who has
            privileges to create issues at the server.</para>
          </step>
        </procedure>

        <para>If you omiss the parameters username and password, make sure to
        have the environment variables <envar>JIRA_USER</envar> and
        <envar>JIRA_PASSWORD</envar> set before you start the DamageControl
        server.</para>
      </section>
    </section>

    <section>
      <title>DamageControl Notifications</title>

      <section>
        <title>Send EMails on build</title>

        <para>By default DamageControl will send no notification messages on
        each build. In oder to send EMails on successful or failed build, you
        have to configure an EMail publisher. To do this, follow these
        steps.</para>

        <procedure>
          <step>
            <para>Open your DamageControl server configuration file in a text
            editor.</para>
          </step>

          <step>
            <para>Find following line.</para>

            <programlisting>def server.init_custom_components</programlisting>
          </step>

          <step>
            <para>Add following code below this line.</para>

            <programlisting>require 'damagecontrol/publisher/EmailPublisher'
component(:email_publisher, EmailPublisher.new(hub, build_history_repository,
  :SubjectTemplate =&gt; "short_text_build_result.erb", 
  :BodyTemplate =&gt; "short_html_build_result.erb",
  :FromEmail =&gt; "<replaceable>damagecontrol@mydomain.com</replaceable>",
  :MailServerHost =&gt; "<replaceable>localhost</replaceable>",
  :MailServerPort =&gt; 25))</programlisting>

            <para>Replace <literal>damagecontrol@mydomain.com</literal> with
            the desired sender address and <literal>localhost</literal> with
            the hostname of the mail server.</para>
          </step>
        </procedure>

        <para>Under some circumstances, DamageControl will use the wrong
        hostname in created EMails. This is most likely the case if you are
        accessing DamageControl via an Apache proxy. To prevent DamageControl
        from creating incorrect URLs in EMails and notification messages, you
        have to edit the DamageControl server configuration.</para>

        <procedure>
          <step>
            <para>Open your DamageControl server configuration file in a text
            editor.</para>
          </step>

          <step>
            <para>Find the section which configures the network server. This
            section looks in the default configuration like this:</para>

            <programlisting>server = DamageControlServer.new(
  :RootDir =&gt; ENV["DAMAGECONTROL_WORK"],
  :HttpPort =&gt; 4712,
  :PollingInterval =&gt; 60 # specified in seconds
  # to allow access only from localhost then uncomment line below 
  # (when running behind an Apache proxy for example)
  #:AllowIPs =&gt; [ "127.0.0.1" ],
  )</programlisting>
          </step>

          <step>
            <para>Add the parameter ExternalWebUrl, which points to the public
            root of the DamageControl installation.</para>

            <programlisting>server = DamageControlServer.new(
  :RootDir =&gt; ENV["DAMAGECONTROL_WORK"],
  :HttpPort =&gt; 4712,
  :ExternalWebUrl =&gt; "http://my-machine/damagecontrol/public"
  :PollingInterval =&gt; 60 # specified in seconds
  # to allow access only from localhost then uncomment line below 
  # (when running behind an Apache proxy for example)
  #:AllowIPs =&gt; [ "127.0.0.1" ],
  )</programlisting>
          </step>
        </procedure>
      </section>

      <section>
        <title>Publish to IRC server</title>

        <para>Publishing build results to an IRC server requires similar
        configuration of an IRC publisher. This is done by following these
        steps.</para>

        <procedure>
          <step>
            <para>Open your DamageControl server configuration file in a text
            editor.</para>
          </step>

          <step>
            <para>Find following line.</para>

            <programlisting>def server.init_custom_components</programlisting>
          </step>

          <step>
            <para>Add following code below this line.</para>

            <programlisting>require 'damagecontrol/publisher/IRCPublisher'
component(:irc_publisher, 
  IRCPublisher.new(
    hub, 
   "<replaceable>some.irc.server</replaceable>", 
   '#<replaceable>somechannel</replaceable>', 
   "short_text_build_result_with_link.erb"))</programlisting>

            <para>Replace <literal>some.irc.server</literal> with the hostname
            of your IRC server and <literal>somechannel</literal> with the
            channel name.</para>
          </step>
        </procedure>
      </section>

      <section>
        <title>RSS</title>

        <para>DamageControl offers a convenient way to view the results of the
        last builds of a project. If you use a RSS reader like <phrase
        os="macosx">NetNewsWire,</phrase> <phrase
        os="windows">RSSBandit,</phrase> <phrase os="linux">Straw</phrase> or
        the LiveBookmarks fetaure of Mozilla Firefox, you should locate the
        orange XML icon at the project page and subscribe to the linked
        RSS-feed.</para>

        <figure>
          <title>The XML icon</title>

          <screenshot>
            <mediaobject>
              <imageobject>
                <imagedata contentwidth="4cm" fileref="images/xml_icon.png" />
              </imageobject>
            </mediaobject>
          </screenshot>
        </figure>

        <para>Each time a build succeeds or fails, you will be notified
        through your RSS reader.</para>
      </section>

      <section>
        <title>Windows System Tray</title>

        <para>Another nice way to be notified is the Windows System Tray icon,
        which can be installed for DamageControl. You can configure a number
        of projects on different DamageControl servers and the tray icon will
        notify you of successful or failed builds through popup ballons and
        sounds.</para>

        <figure>
          <title>The Windows System Tray Icon</title>

          <screenshot>
            <mediaobject>
              <imageobject>
                <imagedata contentwidth="4cm" fileref="images/dctray_net.png" />
              </imageobject>
            </mediaobject>
          </screenshot>
        </figure>

        <para>The installation of the Windows System Tray icon is done through
        the installer package. After starting the tray icon, you should click
        it with the right mouse button to enter the settings menu and
        configure the projects to monitor.</para>
      </section>

      <section>
        <title>GNOME System Tray</title>

        <para>There is also a System Tray Icon for the GNOME desktop, which
        will show a red or green status light if depending on the build status
        of your monitored projects. The GNOME System Tray Icon currently does
        not support the display of notification messages nor the playing of
        sound to notify the user of finished builds.</para>

        <figure>
          <title>The GNOME System Tray Icon</title>

          <screenshot>
            <mediaobject>
              <imageobject>
                <imagedata contentwidth="4cm" fileref="images/dctray_mono.png" />
              </imageobject>
            </mediaobject>
          </screenshot>
        </figure>

        <para>To use this icon, you will need a Linux computer with following
        software: Mono, Gtk# and the GNOME desktop. After unpacking the
        DamageControl-MonoTray package, you can start the Tray Icon using
        following command.</para>

        <screen><prompt># </prompt><userinput>mono MonoTray.exe</userinput></screen>
      </section>
    </section>
  </chapter>

  <chapter>
    <title>Developer Handbook</title>

    <para>This chapter contains information for developers of DamageControl or
    users of DamageControl who would like to extend the features offered by
    DamageControl.</para>

    <remark>TODO.</remark>
  </chapter>
</book>