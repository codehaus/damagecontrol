<html>
<head>
<title><%= project_name %> Configuration</title>
<link type="text/css" rel="stylesheet" href="css/style.css">
</head>
<body onLoad="executeOnLoad()">
<script><!--

function executeOnLoad() {  
  <% scm_configurators.each do |scm_configurator| %>
    <%= scm_configurator.javascript_on_load %>
  <% end %>
}

initialScm = "<%= project_config['scm_type'] %>"
oldScmDiv = null
function showScm(scm) {
  if(!oldScmDiv) {
    oldScmDiv = document.getElementById(initialScm)
  }
  if(oldScmDiv) {
    oldScmDiv.style.display = 'none'
  }
  newScmDiv = document.getElementById(scm)
  newScmDiv.style.display = 'block'
  oldScmDiv = newScmDiv
}

<% scm_configurators.each do |scm_configurator| %>
  <%= scm_configurator.javascript_declarations %>
<% end %>

// --></script>

<form>
<table width="100%">
<tr>
  <td class="setting-name">Project name</td>
  <td width="75%">
    <% if project_exists? %>
      <%= project_name %>
      <input name="project_name" type="hidden" value="<%= project_name %>"/>
    <% else %>
      <input class="setting-input" name="project_name" type="text" value="<%= project_name %>"/>
    <% end %>
  </td>
</tr>
<tr>
  <% 
    # Hackish/Neat trick:
    # the inspect will convert backslashes to double backslashes and do all sorts of nice things
    # it will also add " " around the string so it is not needed in the actual html
    # TODO: It also garbles double quotes! (AH)
    build_command_line_attrib_value = project_config['build_command_line'] ? project_config['build_command_line'].inspect : "\"\""
  %>
  <td class="setting-name">Build command</td>
  <td><input class="setting-input" name="build_command_line" type="text" value=<%= build_command_line_attrib_value %>/></td>
</tr>
<tr>
</tr>
<tr>
  <td class="setting-name">Nag email</td>
  <td><input class="setting-input" name="nag_email" id="nag_email" type="text" value="<%= project_config['nag_email'] %>"/></td>
</tr>
<tr>
  <td>&nbsp;</td>
  <td class="setting-description">
    Several email addresses can be specified here, separated by a comma or a space charatcter.
  </td>
</tr>
<tr>
  <td class="setting-name">JIRA url</td>
  <td><input class="setting-input" name="jira_url" id="jira_url" type="text" value="<%= project_config['jira_url'] %>"/></td>
</tr>

<tr>
  <td>ViewCVS/Fisheye URL</td>
  <td><input class="setting-input" name="scm_web_url" id="scm_web_url" type="text" value="<%= project_config['scm_web_url'] %>"></td>
</tr>
<tr>
  <td>&nbsp;</td>
  <td class="setting-description">
    The base url to ViewCVS or Fisheye. For example: <tt>http://cvs.damagecontrol.codehaus.org/</tt>.
  </td>
</tr>

<tr>
  <td class="setting-name">Next build number</td>
  <td><input class="setting-input" name="next_build_number" id="next_build_number" type="text" value="<%= next_build_number %>"/></td>
</tr>
<tr>
  <td>&nbsp;</td>
  <td class="setting-description">
    The number that the next successful build will have. If you already have a number of labelled builds before you can override this here.
  </td>
</tr>

<tr>
  <td class="setting-name">Child builds</td>
  <td><input class="setting-input" name="dependent_projects" id="dependent_projects" type="text" value="<%= dependent_projects %>"/></td>
</tr>
<tr>
  <td>&nbsp;</td>
  <td class="setting-description">
    Comma separated list of child projects, builds of these projects will be trigged after successful build of this project.
    See <a href="http://damagecontrol.codehaus.org/Build+dependencies">Build dependencies</a>
  </td>
</tr>

<tr>
  <td class="setting-name">Log-files to merge</td>
  <td><input class="setting-input" name="logs_to_merge" id="logs_to_archive" type="text" value="<%= logs_to_merge %>"/></td>
</tr>
<tr>
  <td>&nbsp;</td>
  <td class="setting-description">
    Merged into one log file, reports work on the content of this log-file. Can contain wildcards anywhere.
    For example: To see JUnit tests from Maven specify <tt>target/test-reports/*.xml</tt>, for multiple Maven modules <tt>*/target/test-reports/*.xml</tt>.
    See <a href="http://damagecontrol.codehaus.org/Viewing+build+results+from+build+tools">Viewing build results from build tools</a>
  </td>
</tr>

<tr>
  <td class="setting-name">Files to archive</td>
  <td><input class="setting-input" name="artifacts_to_archive" id="artifacts_to_archive" type="text" value="<%= artifacts_to_archive %>"/></td>
</tr>
<tr>
  <td>&nbsp;</td>
  <td class="setting-description">
    Specify comma-separated list of paths to files that DamageControl will archive after a build.
    Archived files are accessible from the build page. May contain wildcards.
  </td>
</tr>

<tr>
  <td class="setting-name">Polling</td>
  <td><input name="polling" id="polling" type="checkbox" <%= if project_config['polling'] then "checked=true" else "" end %> /></td>
</tr>
<tr>
  <td>&nbsp;</td>
  <td class="setting-description">
    Polling will at a specified interval check the SCM for changes. If there are any changes a build will be trigged.
    The polling interval is currently specified at the server level and can't be changed on a project level,
    this <a href="http://jira.codehaus.org/browse/DC-260">will be fixed in the future</a>.
  </td>
</tr>

<tr>
  <td>Source control</td>
  <td>
    <% scm_configurators.each do |scm_configurator| %>
      <input id="<%= scm_configurator.scm_id %>radio" type="radio" value="<%= scm_configurator.scm_id %>" name="scm_id" onClick="javascript:showScm('<%= scm_configurator.scm_id %>')"<%if(scm_configurator.selected?)%>checked="true"<%end%>/> <%= scm_configurator.scm_display_name %>
    <% end %>
  </td>
</tr>
</table>

  <% scm_configurators.each do |scm_configurator| %>
    <div id="<%= scm_configurator.scm_id %>" style="<% if(scm_configurator.selected?)%>display:block<%else%>display:none<%end%>">
      <%= scm_configurator.config_form %>
    </div>
  <% end %>

  <input name="action" type="hidden" value="<%= action %>" />
  <input type="submit" value="Save"/>
  
</form>
  
</body>
</html>
